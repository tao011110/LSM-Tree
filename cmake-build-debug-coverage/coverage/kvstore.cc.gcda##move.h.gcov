        -:    0:Source:D:/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/bits/move.h
        -:    0:Graph:D:\PROGRAM_CPP\LSM-2\cmake-build-debug-coverage\CMakeFiles\LSM_2persistence.cc.dir\kvstore.cc.gcno
        -:    0:Data:D:\PROGRAM_CPP\LSM-2\cmake-build-debug-coverage\CMakeFiles\LSM_2persistence.cc.dir\kvstore.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  /**
        -:   42:   *  @brief Same as C++11 std::addressof
        -:   43:   *  @ingroup utilities
        -:   44:   */
        -:   45:  template<typename _Tp>
        -:   46:    inline _GLIBCXX_CONSTEXPR _Tp*
  1460881:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  1460881:   48:    { return __builtin_addressof(__r); }
------------------
_ZSt11__addressofIN7KVStore4nodeEEPT_RS2_:
function _ZSt11__addressofIN7KVStore4nodeEEPT_RS2_ called 1249351 returned 100% blocks executed 100%
  1249351:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  1249351:   48:    { return __builtin_addressof(__r); }
  1249351:   48-block  0
------------------
_ZSt11__addressofISt6vectorIN7KVStore4nodeESaIS2_EEEPT_RS5_:
function _ZSt11__addressofISt6vectorIN7KVStore4nodeESaIS2_EEEPT_RS5_ called 526 returned 100% blocks executed 100%
      526:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
      526:   48:    { return __builtin_addressof(__r); }
      526:   48-block  0
------------------
_ZSt11__addressofIN8memTable8dataNodeEEPT_RS2_:
function _ZSt11__addressofIN8memTable8dataNodeEEPT_RS2_ called 205027 returned 100% blocks executed 100%
   205027:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   205027:   48:    { return __builtin_addressof(__r); }
   205027:   48-block  0
------------------
_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_:
function _ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_ called 5977 returned 100% blocks executed 100%
     5977:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
     5977:   48:    { return __builtin_addressof(__r); }
     5977:   48-block  0
------------------
        -:   49:
        -:   50:#if __cplusplus >= 201103L
        -:   51:
        -:   52:_GLIBCXX_END_NAMESPACE_VERSION
        -:   53:} // namespace
        -:   54:
        -:   55:#include <type_traits> // Brings in std::declval too.
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup utilities
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /**
        -:   67:   *  @brief  Forward an lvalue.
        -:   68:   *  @return The parameter cast to the specified type.
        -:   69:   *
        -:   70:   *  This function is used to implement "perfect forwarding".
        -:   71:   */
        -:   72:  template<typename _Tp>
        -:   73:    constexpr _Tp&&
  957036*:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  957036*:   75:    { return static_cast<_Tp&&>(__t); }
------------------
_ZSt7forwardIN7KVStore4nodeEEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIN7KVStore4nodeEEOT_RNSt16remove_referenceIS2_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
------------------
_ZSt7forwardIN8memTable8dataNodeEEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIN8memTable8dataNodeEEOT_RNSt16remove_referenceIS2_E4typeE called 74595 returned 100% blocks executed 100%
    74595:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    74595:   75:    { return static_cast<_Tp&&>(__t); }
    74595:   75-block  0
------------------
_ZSt7forwardIRN7KVStore4nodeEEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRN7KVStore4nodeEEOT_RNSt16remove_referenceIS3_E4typeE called 109194 returned 100% blocks executed 100%
   109194:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   109194:   75:    { return static_cast<_Tp&&>(__t); }
   109194:   75-block  0
------------------
_ZSt7forwardISt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE:
function _ZSt7forwardISt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE called 150 returned 100% blocks executed 100%
      150:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      150:   75:    { return static_cast<_Tp&&>(__t); }
      150:   75-block  0
------------------
_ZSt7forwardIRSt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS6_E4typeE:
function _ZSt7forwardIRSt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS6_E4typeE called 113 returned 100% blocks executed 100%
      113:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      113:   75:    { return static_cast<_Tp&&>(__t); }
      113:   75-block  0
------------------
_ZSt7forwardIRKN8memTable8dataNodeEEOT_RNSt16remove_referenceIS4_E4typeE:
function _ZSt7forwardIRKN8memTable8dataNodeEEOT_RNSt16remove_referenceIS4_E4typeE called 113187 returned 100% blocks executed 100%
   113187:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   113187:   75:    { return static_cast<_Tp&&>(__t); }
   113187:   75-block  0
------------------
_ZSt7forwardIRKSt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS7_E4typeE:
function _ZSt7forwardIRKSt6vectorIN7KVStore4nodeESaIS2_EEEOT_RNSt16remove_referenceIS7_E4typeE called 687 returned 100% blocks executed 100%
      687:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      687:   75:    { return static_cast<_Tp&&>(__t); }
      687:   75-block  0
------------------
_ZSt7forwardIRKN7KVStore4nodeEEOT_RNSt16remove_referenceIS4_E4typeE:
function _ZSt7forwardIRKN7KVStore4nodeEEOT_RNSt16remove_referenceIS4_E4typeE called 649222 returned 100% blocks executed 100%
   649222:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   649222:   75:    { return static_cast<_Tp&&>(__t); }
   649222:   75-block  0
------------------
_ZSt7forwardIRKPN5Cache4NodeEEOT_RNSt16remove_referenceIS5_E4typeE:
function _ZSt7forwardIRKPN5Cache4NodeEEOT_RNSt16remove_referenceIS5_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
------------------
_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE:
function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE called 354 returned 100% blocks executed 100%
      354:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      354:   75:    { return static_cast<_Tp&&>(__t); }
      354:   75-block  0
------------------
_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE called 775 returned 100% blocks executed 100%
      775:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      775:   75:    { return static_cast<_Tp&&>(__t); }
      775:   75-block  0
------------------
_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE:
function _ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE called 8759 returned 100% blocks executed 100%
     8759:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     8759:   75:    { return static_cast<_Tp&&>(__t); }
     8759:   75-block  0
------------------
        -:   76:
        -:   77:  /**
        -:   78:   *  @brief  Forward an rvalue.
        -:   79:   *  @return The parameter cast to the specified type.
        -:   80:   *
        -:   81:   *  This function is used to implement "perfect forwarding".
        -:   82:   */
        -:   83:  template<typename _Tp>
        -:   84:    constexpr _Tp&&
        -:   85:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   86:    {
        -:   87:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   88:		    " substituting _Tp is an lvalue reference type");
        -:   89:      return static_cast<_Tp&&>(__t);
        -:   90:    }
        -:   91:
        -:   92:  /**
        -:   93:   *  @brief  Convert a value to an rvalue.
        -:   94:   *  @param  __t  A thing of arbitrary type.
        -:   95:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   96:  */
        -:   97:  template<typename _Tp>
        -:   98:    constexpr typename std::remove_reference<_Tp>::type&&
  241328*:   99:    move(_Tp&& __t) noexcept
  241328*:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
_ZSt4moveIRZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEUlRKNS0_4nodeESD_E_EONSt16remove_referenceIT_E4typeEOSH_:
function _ZSt4moveIRZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEUlRKNS0_4nodeESD_E_EONSt16remove_referenceIT_E4typeEOSH_ called 78 returned 100% blocks executed 100%
       78:   99:    move(_Tp&& __t) noexcept
       78:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       78:  100-block  0
------------------
_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_ called 3535 returned 100% blocks executed 100%
     3535:   99:    move(_Tp&& __t) noexcept
     3535:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     3535:  100-block  0
------------------
_ZSt4moveIRSt6vectorIPN5Cache4NodeESaIS3_EEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRSt6vectorIPN5Cache4NodeESaIS3_EEEONSt16remove_referenceIT_E4typeEOS8_ called 40 returned 100% blocks executed 100%
       40:   99:    move(_Tp&& __t) noexcept
       40:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       40:  100-block  0
------------------
_ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_:
function _ZSt4moveIRPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS9_ called 3573 returned 100% blocks executed 100%
     3573:   99:    move(_Tp&& __t) noexcept
     3573:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     3573:  100-block  0
------------------
_ZSt4moveIRPN8memTable8dataNodeEEONSt16remove_referenceIT_E4typeEOS5_:
function _ZSt4moveIRPN8memTable8dataNodeEEONSt16remove_referenceIT_E4typeEOS5_ called 2826 returned 100% blocks executed 100%
     2826:   99:    move(_Tp&& __t) noexcept
     2826:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     2826:  100-block  0
------------------
_ZSt4moveIRSaIPN5Cache4NodeEEEONSt16remove_referenceIT_E4typeEOS6_:
function _ZSt4moveIRSaIPN5Cache4NodeEEEONSt16remove_referenceIT_E4typeEOS6_ called 40 returned 100% blocks executed 100%
       40:   99:    move(_Tp&& __t) noexcept
       40:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       40:  100-block  0
------------------
_ZSt4moveIRPN7KVStore4nodeEEONSt16remove_referenceIT_E4typeEOS5_:
function _ZSt4moveIRPN7KVStore4nodeEEONSt16remove_referenceIT_E4typeEOS5_ called 3420 returned 100% blocks executed 100%
     3420:   99:    move(_Tp&& __t) noexcept
     3420:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     3420:  100-block  0
------------------
_ZSt4moveIRPSt6vectorIN7KVStore4nodeESaIS2_EEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRPSt6vectorIN7KVStore4nodeESaIS2_EEEONSt16remove_referenceIT_E4typeEOS8_ called 1035 returned 100% blocks executed 100%
     1035:   99:    move(_Tp&& __t) noexcept
     1035:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     1035:  100-block  0
------------------
_ZSt4moveIRSaIN7KVStore4nodeEEEONSt16remove_referenceIT_E4typeEOS5_:
function _ZSt4moveIRSaIN7KVStore4nodeEEEONSt16remove_referenceIT_E4typeEOS5_ called 300 returned 100% blocks executed 100%
      300:   99:    move(_Tp&& __t) noexcept
      300:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
      300:  100-block  0
------------------
_ZSt4moveIRZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEUlRKNS0_4nodeESD_E0_EONSt16remove_referenceIT_E4typeEOSH_:
function _ZSt4moveIRZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEUlRKNS0_4nodeESD_E0_EONSt16remove_referenceIT_E4typeEOSH_ called 42624 returned 100% blocks executed 100%
    42624:   99:    move(_Tp&& __t) noexcept
    42624:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    42624:  100-block  0
------------------
_ZSt4moveIRPPN5Cache4NodeEEONSt16remove_referenceIT_E4typeEOS6_:
function _ZSt4moveIRPPN5Cache4NodeEEONSt16remove_referenceIT_E4typeEOS6_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_:
function _ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_ called 847 returned 100% blocks executed 100%
      847:   99:    move(_Tp&& __t) noexcept
      847:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
      847:  100-block  0
------------------
_ZSt4moveIRN7KVStore4nodeEEONSt16remove_referenceIT_E4typeEOS4_:
function _ZSt4moveIRN7KVStore4nodeEEONSt16remove_referenceIT_E4typeEOS4_ called 140314 returned 100% blocks executed 100%
   140314:   99:    move(_Tp&& __t) noexcept
   140314:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   140314:  100-block  0
------------------
_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEUlRKNS3_4nodeESG_E_EEEONSt16remove_referenceIT_E4typeEOSL_:
function _ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEUlRKNS3_4nodeESG_E_EEEONSt16remove_referenceIT_E4typeEOSL_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEUlRKNS3_4nodeESG_E0_EEEONSt16remove_referenceIT_E4typeEOSL_:
function _ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEEUlRKNS3_4nodeESG_E0_EEEONSt16remove_referenceIT_E4typeEOSL_ called 42546 returned 100% blocks executed 100%
    42546:   99:    move(_Tp&& __t) noexcept
    42546:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    42546:  100-block  0
------------------
_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_:
function _ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRSt6vectorIN7KVStore4nodeESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_:
function _ZSt4moveIRSt6vectorIN7KVStore4nodeESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_ called 150 returned 100% blocks executed 100%
      150:   99:    move(_Tp&& __t) noexcept
      150:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
      150:  100-block  0
------------------
        -:  101:
        -:  102:
        -:  103:  template<typename _Tp>
        -:  104:    struct __move_if_noexcept_cond
        -:  105:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  106:                    is_copy_constructible<_Tp>>::type { };
        -:  107:
        -:  108:  /**
        -:  109:   *  @brief  Conditionally convert a value to an rvalue.
        -:  110:   *  @param  __x  A thing of arbitrary type.
        -:  111:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  112:   *
        -:  113:   *  Same as std::move unless the type's move constructor could throw and the
        -:  114:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  115:   */
        -:  116:  template<typename _Tp>
        -:  117:    constexpr typename
        -:  118:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  119:    move_if_noexcept(_Tp& __x) noexcept
        -:  120:    { return std::move(__x); }
        -:  121:
        -:  122:  // declval, from type_traits.
        -:  123:
        -:  124:#if __cplusplus > 201402L
        -:  125:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:  // 2296. std::addressof should be constexpr
        -:  127:# define __cpp_lib_addressof_constexpr 201603
        -:  128:#endif
        -:  129:  /**
        -:  130:   *  @brief Returns the actual address of the object or function
        -:  131:   *         referenced by r, even in the presence of an overloaded
        -:  132:   *         operator&.
        -:  133:   *  @param  __r  Reference to an object or function.
        -:  134:   *  @return   The actual address.
        -:  135:  */
        -:  136:  template<typename _Tp>
        -:  137:    inline _GLIBCXX17_CONSTEXPR _Tp*
        -:  138:    addressof(_Tp& __r) noexcept
        -:  139:    { return std::__addressof(__r); }
        -:  140:
        -:  141:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  142:  // 2598. addressof works on temporaries
        -:  143:  template<typename _Tp>
        -:  144:    const _Tp* addressof(const _Tp&&) = delete;
        -:  145:
        -:  146:  // C++11 version of std::exchange for internal use.
        -:  147:  template <typename _Tp, typename _Up = _Tp>
        -:  148:    inline _Tp
        -:  149:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  150:    {
        -:  151:      _Tp __old_val = std::move(__obj);
        -:  152:      __obj = std::forward<_Up>(__new_val);
        -:  153:      return __old_val;
        -:  154:    }
        -:  155:
        -:  156:  /// @} group utilities
        -:  157:
        -:  158:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  159:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  160:#else
        -:  161:#define _GLIBCXX_MOVE(__val) (__val)
        -:  162:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  163:#endif
        -:  164:
        -:  165:  /**
        -:  166:   *  @addtogroup utilities
        -:  167:   *  @{
        -:  168:   */
        -:  169:
        -:  170:  /**
        -:  171:   *  @brief Swaps two values.
        -:  172:   *  @param  __a  A thing of arbitrary type.
        -:  173:   *  @param  __b  Another thing of arbitrary type.
        -:  174:   *  @return   Nothing.
        -:  175:  */
        -:  176:  template<typename _Tp>
        -:  177:    inline
        -:  178:#if __cplusplus >= 201103L
        -:  179:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  180:			      is_move_constructible<_Tp>,
        -:  181:			      is_move_assignable<_Tp>>::value>::type
   10574*:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
   17504*:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
   10574*:  194:      __a = _GLIBCXX_MOVE(__b);
   10574*:  195:      __b = _GLIBCXX_MOVE(__tmp);
   10574*:  196:    }
------------------
_ZSt4swapIN7KVStore4nodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_:
function _ZSt4swapIN7KVStore4nodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_ called 6930 returned 100% blocks executed 82%
     6930:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
    13860:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
     6930:  193-block  0
call    0 returned 6930
call    1 returned 6930
branch  2 taken 6930 (fallthrough)
branch  3 taken 0 (throw)
     6930:  193-block  1
call    4 returned 6930
    $$$$$:  193-block  2
call    5 never executed
     6930:  194:      __a = _GLIBCXX_MOVE(__b);
     6930:  194-block  0
call    0 returned 6930
call    1 returned 6930
branch  2 taken 6930 (fallthrough)
branch  3 taken 0 (throw)
     6930:  195:      __b = _GLIBCXX_MOVE(__tmp);
     6930:  195-block  0
call    0 returned 6930
call    1 returned 6930
branch  2 taken 6930 (fallthrough)
branch  3 taken 0 (throw)
     6930:  196:    }
------------------
_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_:
function _ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_ called 26 returned 100% blocks executed 100%
       26:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
       26:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
       26:  193-block  0
call    0 returned 26
       26:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 26
       26:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 26
       26:  196:    }
------------------
_ZSt4swapIPPN5Cache4NodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_:
function _ZSt4swapIPPN5Cache4NodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_ called 0 returned 0% blocks executed 0%
    #####:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
    #####:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    %%%%%:  193-block  0
call    0 never executed
    #####:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 never executed
    #####:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 never executed
    #####:  196:    }
------------------
_ZSt4swapIPSt6vectorIN7KVStore4nodeESaIS2_EEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_:
function _ZSt4swapIPSt6vectorIN7KVStore4nodeESaIS2_EEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_ called 345 returned 100% blocks executed 100%
      345:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
      345:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
      345:  193-block  0
call    0 returned 345
      345:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 345
      345:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 345
      345:  196:    }
------------------
_ZSt4swapIPN7KVStore4nodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_:
function _ZSt4swapIPN7KVStore4nodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_ called 1140 returned 100% blocks executed 100%
     1140:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
     1140:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
     1140:  193-block  0
call    0 returned 1140
     1140:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 1140
     1140:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 1140
     1140:  196:    }
------------------
_ZSt4swapIPN8memTable8dataNodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_:
function _ZSt4swapIPN8memTable8dataNodeEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_ called 942 returned 100% blocks executed 100%
      942:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
      942:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
      942:  193-block  0
call    0 returned 942
      942:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 942
      942:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 942
      942:  196:    }
------------------
_ZSt4swapIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_:
function _ZSt4swapIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_ called 1191 returned 100% blocks executed 100%
     1191:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
     1191:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
     1191:  193-block  0
call    0 returned 1191
     1191:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 1191
     1191:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 1191
     1191:  196:    }
------------------
        -:  197:
        -:  198:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  199:  // DR 809. std::swap should be overloaded for array types.
        -:  200:  /// Swap the contents of two arrays.
        -:  201:  template<typename _Tp, size_t _Nm>
        -:  202:    inline
        -:  203:#if __cplusplus >= 201103L
        -:  204:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  205:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  206:    noexcept(__is_nothrow_swappable<_Tp>::value)
        -:  207:#else
        -:  208:    void
        -:  209:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  210:#endif
        -:  211:    {
        -:  212:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  213:	swap(__a[__n], __b[__n]);
        -:  214:    }
        -:  215:
        -:  216:  /// @} group utilities
        -:  217:_GLIBCXX_END_NAMESPACE_VERSION
        -:  218:} // namespace
        -:  219:
        -:  220:#endif /* _MOVE_H */
