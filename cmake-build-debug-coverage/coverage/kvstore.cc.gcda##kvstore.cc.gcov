        -:    0:Source:D:/PROGRAM_CPP/LSM-2/kvstore.cc
        -:    0:Graph:D:\PROGRAM_CPP\LSM-2\cmake-build-debug-coverage\CMakeFiles\LSM_2persistence.cc.dir\kvstore.cc.gcno
        -:    0:Data:D:\PROGRAM_CPP\LSM-2\cmake-build-debug-coverage\CMakeFiles\LSM_2persistence.cc.dir\kvstore.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "kvstore.h"
        -:    2:#include "utils.h"
        -:    3:#include <string>
        -:    4:
function _ZN7KVStoreC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 32%
        1:    5:KVStore::KVStore(const std::string &dir): KVStoreAPI(dir)
        1:    5-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:    5-block  1
call    5 never executed
    $$$$$:    5-block  2
call    6 never executed
        -:    6:{
        1:    7:    currentLevel = 0;
        1:    8:    currentNum = 0;
        -:    9:
        1:   10:    int level = 0;
        2:   11:    std::string parentDir = "data";
        1:   11-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:   11-block  1
    $$$$$:   11-block  2
call    5 never executed
        2:   12:    std::vector<std::string> dirs;
call    0 returned 1
call    1 returned 1
    $$$$$:   12-block  0
call    2 never executed
        1:   13:    utils::scanDir(parentDir, dirs);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   13-block  1
call    6 returned 1
    $$$$$:   13-block  2
call    7 never executed
    $$$$$:   13-block  3
        1:   14:    int capacity = dirs.size();
call    0 returned 1
        2:   15:    std::string path = "data/level-";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:   15-block  0
    $$$$$:   15-block  1
call    5 never executed
        2:   16:    std::string tmppath = path + std::to_string(level);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   16-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$:   16-block  1
    $$$$$:   16-block  2
call    7 never executed
        1:   17:    std::vector<std::string> fileName;
call    0 returned 1
    $$$$$:   17-block  0
call    1 never executed
       1*:   18:    while(level < capacity) {
        1:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   19:        utils::scanDir(tmppath, fileName);
    %%%%%:   19-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   19-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   19-block  2
call    6 never executed
    $$$$$:   19-block  3
call    7 never executed
    $$$$$:   19-block  4
    #####:   20:        uint64_t size = fileName.size();
call    0 never executed
    #####:   21:        for (uint64_t i = 0; i < size; i++) {
    %%%%%:   21-block  0
branch  0 never executed
branch  1 never executed
    #####:   22:            std::string filepath = tmppath + "/" + fileName[i];
    %%%%%:   22-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   22-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:   22-block  2
    $$$$$:   22-block  3
call    7 never executed
        -:   23:            //std::cout << "file path  " << filepath << std::endl;
    #####:   24:            cache.fileToNode(level, filepath);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   24-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   24-block  1
call    6 never executed
call    7 never executed
    $$$$$:   24-block  2
call    8 never executed
    $$$$$:   24-block  3
        -:   25:        }
    #####:   26:        level++;
    #####:   27:        tmppath = path + std::to_string(level);
    %%%%%:   27-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   27-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   27-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:   27-block  3
call    9 never executed
    $$$$$:   27-block  4
    #####:   28:        fileName.clear();
call    0 never executed
        -:   29:    }
        1:   30:    std::vector<std::string>().swap(fileName);
        1:   30-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:   31:
        1:   32:    maxLevel = level;
call    0 returned 1
        1:   33:}
        -:   34:
        -:   35://系统正常关闭
function _ZN7KVStoreD2Ev called 0 returned 0% blocks executed 0%
    #####:   36:KVStore::~KVStore()
call    0 never executed
call    1 never executed
        -:   37:{
        -:   38:    //将 MemTable 中的所有数据以 SSTable 形式写回
    #####:   39:    std::vector<memTable::dataNode> vec = mt.writeBack();
    %%%%%:   39-block  0
call    0 never executed
call    1 never executed
    #####:   40:    if(vec.size() != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   41:        makeSST(vec);
    %%%%%:   41-block  0
call    0 never executed
        -:   42:    }
    #####:   43:    mt.~memTable();
    %%%%%:   43-block  0
call    0 never executed
    #####:   44:    cache.~Cache();
call    0 never executed
    #####:   45:}
        -:   46:
        -:   47:/**
        -:   48: * Insert/Update the key-value pair.
        -:   49: * No return values for simplicity.
        -:   50: */
function _ZN7KVStore3putEyRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13214 returned 99% blocks executed 88%
    13214:   51:void KVStore::put(uint64_t key, const std::string &s)
        -:   52:{
    13214:   53:    if(mt.getByteSize() +  s.length() + 12 > 2086880){
    13214:   53-block  0
call    0 returned 13214
call    1 returned 13214
branch  2 taken 42 (fallthrough)
branch  3 taken 13172
        -:   54://        if(key >= 64500) {
        -:   55://        std::cout << "write into sst at   " << key << std::endl;
        -:   56://        }
       83:   57:        std::vector<memTable::dataNode> vec = mt.writeBack();
       42:   57-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       41:   57-block  1
call    3 returned 41
    $$$$$:   57-block  2
call    4 never executed
       42:   58:        currentLevel = 0;
       42:   59:        makeSST(vec);
       42:   59-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   60:        std::vector<memTable::dataNode>().swap(vec);
       42:   60-block  0
call    0 returned 42
call    1 returned 42
call    2 returned 42
       42:   61:        mt.reset();
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:   62:        checkCompaction();
       42:   62-block  0
call    0 returned 41
branch  1 taken 41 (fallthrough)
branch  2 taken 0 (throw)
        -:   63:    }
        -:   64:
    13213:   65:    mt.put(key, s);
    13213:   65-block  0
call    0 returned 13213
    13213:   66:}
        -:   67:
function _ZN7KVStore15checkCompactionEv called 81 returned 98% blocks executed 61%
       81:   68:void KVStore::checkCompaction()
        -:   69:{
      160:   70:    std::string path = "data/level-";
       81:   70-block  0
call    0 returned 81
call    1 returned 81
branch  2 taken 81 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 79
    $$$$$:   70-block  1
    $$$$$:   70-block  2
call    5 never executed
       81:   71:    int i = 0;
      241:   72:    std::string tmppath = path + std::to_string(i);
call    0 returned 81
branch  1 taken 81 (fallthrough)
branch  2 taken 0 (throw)
       81:   72-block  0
call    3 returned 81
branch  4 taken 81 (fallthrough)
branch  5 taken 0 (throw)
       79:   72-block  1
call    6 returned 79
    $$$$$:   72-block  2
    $$$$$:   72-block  3
call    7 never executed
      397:   73:    while(utils::dirExists(tmppath)){
      397:   73-block  0
call    0 returned 397
branch  1 taken 397 (fallthrough)
branch  2 taken 0 (throw)
      397:   73-block  1
call    3 returned 397
branch  4 taken 397 (fallthrough)
branch  5 taken 0 (throw)
      397:   73-block  2
call    6 returned 397
branch  7 taken 318 (fallthrough)
branch  8 taken 79
    $$$$$:   73-block  3
call    9 never executed
    $$$$$:   73-block  4
      318:   74:        std::vector<std::string> ret;
      318:   74-block  0
call    0 returned 318
    $$$$$:   74-block  1
call    1 never executed
      318:   75:        int size = utils::scanDir(tmppath, ret);
call    0 returned 318
branch  1 taken 318 (fallthrough)
branch  2 taken 0 (throw)
      318:   75-block  0
call    3 returned 318
branch  4 taken 318 (fallthrough)
branch  5 taken 0 (throw)
      318:   75-block  1
call    6 returned 318
    $$$$$:   75-block  2
call    7 never executed
    $$$$$:   75-block  3
      318:   76:        if(size > pow(2, i + 1)){
branch  0 taken 40 (fallthrough)
branch  1 taken 278
       40:   77:            sort(ret.begin(), ret.end());
       40:   77-block  0
call    0 returned 40
call    1 returned 40
call    2 returned 40
branch  3 taken 40 (fallthrough)
branch  4 taken 0 (throw)
       40:   78:            currentLevel = i;
       40:   79:            compaction(ret);
       40:   79-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
        -:   80:        }
      316:   81:        i++;
      316:   82:        tmppath = path + std::to_string(i);
      316:   82-block  0
call    0 returned 316
branch  1 taken 316 (fallthrough)
branch  2 taken 0 (throw)
      316:   82-block  1
call    3 returned 316
branch  4 taken 316 (fallthrough)
branch  5 taken 0 (throw)
      316:   82-block  2
call    6 returned 316
call    7 returned 316
call    8 returned 316
    $$$$$:   82-block  3
call    9 never executed
    $$$$$:   82-block  4
      316:   83:        std::vector<std::string>().swap(ret);
call    0 returned 316
call    1 returned 316
call    2 returned 316
call    3 returned 316
        -:   84:    }
       79:   85:}
        -:   86:
function _ZN7KVStore7makeSSTERSt6vectorIN8memTable8dataNodeESaIS2_EE called 157 returned 100% blocks executed 55%
      157:   87:void KVStore::makeSST(std::vector<memTable::dataNode> &vec)
        -:   88:{
      314:   89:    sstable st(vec);
      157:   89-block  0
call    0 returned 157
branch  1 taken 157 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 157
    $$$$$:   89-block  1
call    4 never executed
      157:   90:    vec.clear();
      157:   90-block  0
call    0 returned 157
      157:   91:    std::vector<memTable::dataNode>().swap(vec);
call    0 returned 157
call    1 returned 157
call    2 returned 157
      157:   92:    if(isCompaction == false) {
branch  0 taken 42 (fallthrough)
branch  1 taken 115
       42:   93:        st.setTime(time);
       42:   93-block  0
call    0 returned 42
        -:   94:    }
        -:   95:    else{
      115:   96:        st.setTime(compactionTime);
      115:   96-block  0
call    0 returned 115
        -:   97:    };
      157:   98:    time++;
      314:   99:    std::string path = "data/level-";
      157:   99-block  0
call    0 returned 157
call    1 returned 157
branch  2 taken 157 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 157
    $$$$$:   99-block  1
    $$$$$:   99-block  2
call    5 never executed
        -:  100:
      314:  101:    std::string tmppath = path + std::to_string(currentLevel);
call    0 returned 157
branch  1 taken 157 (fallthrough)
branch  2 taken 0 (throw)
      157:  101-block  0
call    3 returned 157
branch  4 taken 157 (fallthrough)
branch  5 taken 0 (throw)
      157:  101-block  1
call    6 returned 157
    $$$$$:  101-block  2
    $$$$$:  101-block  3
call    7 never executed
        -:  102://    if(isCompaction == true){
        -:  103://        std::cout << tmppath + ("/" + std::to_string(currentNum) + ".sst") << std::endl;
        -:  104://    }
      157:  105:    currentNum++;
        -:  106:
      157:  107:    if(utils::dirExists(tmppath)){
call    0 returned 157
branch  1 taken 157 (fallthrough)
branch  2 taken 0 (throw)
      157:  107-block  0
call    3 returned 157
branch  4 taken 157 (fallthrough)
branch  5 taken 0 (throw)
      157:  107-block  1
call    6 returned 157
branch  7 taken 152 (fallthrough)
branch  8 taken 5
    $$$$$:  107-block  2
call    9 never executed
    $$$$$:  107-block  3
      152:  108:        tmppath += ("/" + std::to_string(currentNum) + ".sst");
      152:  108-block  0
call    0 returned 152
branch  1 taken 152 (fallthrough)
branch  2 taken 0 (throw)
      152:  108-block  1
call    3 returned 152
branch  4 taken 152 (fallthrough)
branch  5 taken 0 (throw)
      152:  108-block  2
call    6 returned 152
branch  7 taken 152 (fallthrough)
branch  8 taken 0 (throw)
      152:  108-block  3
call    9 returned 152
branch 10 taken 152 (fallthrough)
branch 11 taken 0 (throw)
      152:  108-block  4
call   12 returned 152
call   13 returned 152
call   14 returned 152
    $$$$$:  108-block  5
call   15 never executed
    $$$$$:  108-block  6
    $$$$$:  108-block  7
call   16 never executed
    $$$$$:  108-block  8
    $$$$$:  108-block  9
call   17 never executed
    $$$$$:  108-block 10
      152:  109:        st.makeFileSST(tmppath);
call    0 returned 152
branch  1 taken 152 (fallthrough)
branch  2 taken 0 (throw)
      152:  109-block  0
call    3 returned 152
branch  4 taken 152 (fallthrough)
branch  5 taken 0 (throw)
      152:  109-block  1
call    6 returned 152
    $$$$$:  109-block  2
call    7 never executed
    $$$$$:  109-block  3
      152:  110:        cache.add(tmppath, st, currentLevel);
call    0 returned 152
branch  1 taken 152 (fallthrough)
branch  2 taken 0 (throw)
        -:  111:    }
        -:  112:    else{
        5:  113:        maxLevel++;
        5:  114:        const char *newDir = tmppath.data();
        5:  114-block  0
call    0 returned 5
        5:  115:        utils::mkdir(newDir);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  116:        tmppath += ("/" + std::to_string(currentNum) + ".sst");
        5:  116-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  116-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  116-block  2
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
        5:  116-block  3
call    9 returned 5
branch 10 taken 5 (fallthrough)
branch 11 taken 0 (throw)
        5:  116-block  4
call   12 returned 5
call   13 returned 5
call   14 returned 5
    $$$$$:  116-block  5
call   15 never executed
    $$$$$:  116-block  6
    $$$$$:  116-block  7
call   16 never executed
    $$$$$:  116-block  8
    $$$$$:  116-block  9
call   17 never executed
    $$$$$:  116-block 10
        5:  117:        st.makeFileSST(tmppath);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  117-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  117-block  1
call    6 returned 5
    $$$$$:  117-block  2
call    7 never executed
    $$$$$:  117-block  3
        5:  118:        cache.add(tmppath, st, currentLevel);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -:  119:    }
        -:  120:    //std::cout << "make  " << tmppath << std::endl;
      157:  121:}
        -:  122:
function _ZN7KVStore10compactionERSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 40 returned 95% blocks executed 62%
       40:  123:void KVStore::compaction(std::vector<std::string> &v)
        -:  124:{
       40:  125:    bool isDeepest = false;
       40:  126:    if(maxLevel == currentLevel){
       40:  126-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 40
    #####:  127:        isDeepest = true;
    %%%%%:  127-block  0
        -:  128:    }
       78:  129:    std::vector<int> num;
       40:  129-block  0
call    0 returned 40
call    1 returned 38
    $$$$$:  129-block  1
call    2 never executed
      346:  130:    for(uint64_t i = 0; i < v.size(); i++){
      346:  130-block  0
call    0 returned 346
branch  1 taken 306 (fallthrough)
branch  2 taken 40
      612:  131:        std::string m = v[i];
      306:  131-block  0
call    0 returned 306
call    1 returned 306
branch  2 taken 306 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 306
    $$$$$:  131-block  1
call    5 never executed
      612:  132:        std::string str = m.substr(0, m.length() - 4);
      306:  132-block  0
call    0 returned 306
call    1 returned 306
branch  2 taken 306 (fallthrough)
branch  3 taken 0 (throw)
      306:  132-block  1
call    4 returned 306
    $$$$$:  132-block  2
call    5 never executed
      306:  133:        int n = atoi(str.c_str());
      306:  133-block  0
call    0 returned 306
call    1 returned 306
      306:  134:        num.push_back(n);
call    0 returned 306
branch  1 taken 306 (fallthrough)
branch  2 taken 0 (throw)
        -:  135:    }
       40:  136:    sort(num.begin(), num.end());
       40:  136-block  0
call    0 returned 40
call    1 returned 40
call    2 returned 40
branch  3 taken 40 (fallthrough)
branch  4 taken 0 (throw)
      346:  137:    for(uint64_t i = 0; i < v.size(); i++){
       40:  137-block  0
      346:  137-block  1
call    0 returned 346
branch  1 taken 306 (fallthrough)
branch  2 taken 40
      612:  138:        std::string m = std::to_string(num[i]);
      306:  138-block  0
call    0 returned 306
call    1 returned 306
branch  2 taken 306 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 306
    $$$$$:  138-block  1
call    5 never executed
      612:  139:        std::string str = m + ".sst";
      306:  139-block  0
call    0 returned 306
branch  1 taken 306 (fallthrough)
branch  2 taken 0 (throw)
      306:  139-block  1
call    3 returned 306
    $$$$$:  139-block  2
call    4 never executed
      306:  140:        v[i] = str;
      306:  140-block  0
call    0 returned 306
call    1 returned 306
branch  2 taken 306 (fallthrough)
branch  3 taken 0 (throw)
        -:  141:        //std::cout << i <<" " << v[i] <<std::endl;
        -:  142:    }
        -:  143://    if(v[0] == "8373.sst"){
        -:  144://        for(int i = 65339; i <= 65462 ; i++) {
        -:  145://            std::cout << "get " << i <<  " is  " << get(i).length() << std::endl;
        -:  146://        }
        -:  147://    }
        -:  148:
       40:  149:    isCompaction = true;
       78:  150:    std::vector<Cache::Node*> curvec, nextvec, comp, curremain, remain;
       40:  150-block  0
call    0 returned 40
call    1 returned 40
call    2 returned 40
call    3 returned 40
call    4 returned 40
call    5 returned 38
call    6 returned 38
call    7 returned 38
call    8 returned 38
call    9 returned 38
    $$$$$:  150-block  1
call   10 never executed
    $$$$$:  150-block  2
call   11 never executed
    $$$$$:  150-block  3
call   12 never executed
    $$$$$:  150-block  4
call   13 never executed
    $$$$$:  150-block  5
call   14 never executed
       40:  151:    std::pair<int, int> range;
       78:  152:    std::string path = "data/level-" + std::to_string(currentLevel);
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
       40:  152-block  0
call    3 returned 40
branch  4 taken 40 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 38
    $$$$$:  152-block  1
    $$$$$:  152-block  2
call    7 never executed
        -:  153:
       40:  154:    uint64_t vsize = v.size();
call    0 returned 40
       40:  155:    uint64_t curSize = pow(2, currentLevel + 1);
       78:  156:    std::vector<std::string> find;
call    0 returned 40
call    1 returned 38
    $$$$$:  156-block  0
call    2 never executed
       40:  157:    if(currentLevel == 0){
branch  0 taken 14 (fallthrough)
branch  1 taken 26
       56:  158:        for(uint64_t i = 0; i < vsize; i++){
       14:  158-block  0
       56:  158-block  1
branch  0 taken 42 (fallthrough)
branch  1 taken 14
       84:  159:            std::string tmppath = path + "/" + v[i];
       42:  159-block  0
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42:  159-block  1
call    4 returned 42
branch  5 taken 42 (fallthrough)
branch  6 taken 0 (throw)
       42:  159-block  2
call    7 returned 42
    $$$$$:  159-block  3
    $$$$$:  159-block  4
call    8 never executed
       42:  160:            find.push_back(tmppath);
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
        -:  161:        }
        -:  162:    }
        -:  163:    else{
      102:  164:        for(uint64_t i = 0; vsize - i > curSize; i++){
       26:  164-block  0
      102:  164-block  1
branch  0 taken 76 (fallthrough)
branch  1 taken 26
      152:  165:            std::string tmppath = path + "/" + v[i];
       76:  165-block  0
call    0 returned 76
call    1 returned 76
branch  2 taken 76 (fallthrough)
branch  3 taken 0 (throw)
       76:  165-block  1
call    4 returned 76
branch  5 taken 76 (fallthrough)
branch  6 taken 0 (throw)
       76:  165-block  2
call    7 returned 76
    $$$$$:  165-block  3
    $$$$$:  165-block  4
call    8 never executed
        -:  166:            //std::cout << "find.push_back  " << tmppath << std::endl;
       76:  167:            find.push_back(tmppath);
call    0 returned 76
branch  1 taken 76 (fallthrough)
branch  2 taken 0 (throw)
        -:  168:        }
        -:  169:    }
        -:  170://    for(uint64_t j = 0; j < find.size(); j++){
        -:  171://        std::cout << "find[j] " << find[j] << std::endl;
        -:  172://    }
       78:  173:    std::vector<Cache::Node*> curtmp = cache.compLevel(currentLevel, range);
       40:  173-block  0
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 38
    $$$$$:  173-block  1
call    4 never executed
       40:  174:    uint64_t curtmp_size = curtmp.size();
       40:  174-block  0
call    0 returned 40
        -:  175:    //std::cout << find.size() << " curtmp_size  " << curtmp_size << std::endl;
      346:  176:    for(uint64_t i = 0; i < curtmp_size; i++){
      346:  176-block  0
branch  0 taken 306 (fallthrough)
branch  1 taken 40
      306:  176-block  1
      306:  177:        uint64_t j = 0;
      306:  178:        uint64_t find_size = find.size();
      306:  178-block  0
call    0 returned 306
        -:  179:        //std::cout << "curtmp[i]->path " << curtmp[i]->path << std::endl;
      966:  180:        for(j = 0; j < find_size; j++){
      966:  180-block  0
branch  0 taken 778 (fallthrough)
branch  1 taken 188
      660:  180-block  1
      778:  181:            if(curtmp[i]->path == find[j]){
      778:  181-block  0
call    0 returned 778
call    1 returned 778
call    2 returned 778
branch  3 taken 118 (fallthrough)
branch  4 taken 660
      118:  182:                curvec.push_back(curtmp[i]);
      118:  182-block  0
call    0 returned 118
call    1 returned 118
branch  2 taken 118 (fallthrough)
branch  3 taken 0 (throw)
      118:  183:                find.erase(find.begin() + j);
      118:  183-block  0
call    0 returned 118
call    1 returned 118
call    2 returned 118
call    3 returned 118
branch  4 taken 118 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  183-block  1
    $$$$$:  183-block  2
    $$$$$:  183-block  3
      118:  184:                if(curtmp[i]->time > compactionTime){
      118:  184-block  0
call    0 returned 118
branch  1 taken 40 (fallthrough)
branch  2 taken 78
       40:  185:                    compactionTime = curtmp[i]->time;
       40:  185-block  0
call    0 returned 40
        -:  186:                }
      118:  187:                break;
      118:  187-block  0
        -:  188:            }
        -:  189:        }
      306:  190:        if(j == find_size){
      306:  190-block  0
branch  0 taken 188 (fallthrough)
branch  1 taken 118
      188:  191:            curremain.push_back(curtmp[i]);
      188:  191-block  0
call    0 returned 188
call    1 returned 188
branch  2 taken 188 (fallthrough)
branch  3 taken 0 (throw)
        -:  192:        }
        -:  193:    }
       40:  194:    uint64_t curremain_size = curremain.size();
       40:  194-block  0
call    0 returned 40
      228:  195:    for(uint64_t i = 1; i <= curremain_size; i++){
      228:  195-block  0
branch  0 taken 188 (fallthrough)
branch  1 taken 40
      188:  195-block  1
      188:  196:        cache.addNode(curremain[curremain_size - i], currentLevel);
      188:  196-block  0
call    0 returned 188
call    1 returned 188
branch  2 taken 188 (fallthrough)
branch  3 taken 0 (throw)
        -:  197:    }
        -:  198:
       40:  199:    std::vector<std::string>().swap(find);
       40:  199-block  0
call    0 returned 40
call    1 returned 40
call    2 returned 40
        -:  200:
       40:  201:    std::vector<std::string>().swap(v);
call    0 returned 40
call    1 returned 40
call    2 returned 40
        -:  202:
       40:  203:    uint64_t min = range.first;
       40:  204:    uint64_t max = range.second;
        -:  205:    //std::cout << min << "  " << max <<std::endl;
       40:  206:    nextvec = cache.compLevel(currentLevel + 1, range);
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
       40:  206-block  0
call    3 returned 40
call    4 returned 40
       40:  207:    uint64_t nextvec_size = nextvec.size();
call    0 returned 40
      286:  208:    for(uint64_t i = 0; i < nextvec_size; i++){
      286:  208-block  0
branch  0 taken 246 (fallthrough)
branch  1 taken 40
      246:  208-block  1
      492:  209:        if((nextvec[i]->min <= max && nextvec[i]->min >= min)
      246:  209-block  0
call    0 returned 246
      246:  209-block  1
call    1 returned 246
branch  2 taken 246 (fallthrough)
branch  3 taken 0
     492*:  210:           || (nextvec[i]->max <= max && nextvec[i]->max >= min)){
branch  0 taken 246 (fallthrough)
branch  1 taken 0
      246:  210-block  0
call    2 returned 246
branch  3 taken 246 (fallthrough)
branch  4 taken 0
      246:  210-block  1
call    5 returned 246
branch  6 taken 0 (fallthrough)
branch  7 taken 246
    %%%%%:  210-block  2
      246:  210-block  3
      246:  210-block  4
branch  8 taken 0 (fallthrough)
branch  9 taken 246
    #####:  211:            comp.push_back(nextvec[i]);
    %%%%%:  211-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  212:        }
        -:  213:        else{
      246:  214:            remain.push_back(nextvec[i]);                   //这样能按照存放在nextvec里时间戳从大到小的顺序
      246:  214-block  0
call    0 returned 246
call    1 returned 246
branch  2 taken 246 (fallthrough)
branch  3 taken 0 (throw)
        -:  215:        }
        -:  216:    }
        -:  217:
       40:  218:    uint64_t remain_size = remain.size();
       40:  218-block  0
call    0 returned 40
      286:  219:    for(uint64_t i = 1; i <= remain_size; i++){
      286:  219-block  0
branch  0 taken 246 (fallthrough)
branch  1 taken 40
      246:  219-block  1
      246:  220:        cache.addNode(remain[remain_size - i], currentLevel + 1);
      246:  220-block  0
call    0 returned 246
call    1 returned 246
branch  2 taken 246 (fallthrough)
branch  3 taken 0 (throw)
        -:  221:    }
        -:  222:
       78:  223:    std::vector<std::vector<node>> toMerge;
       40:  223-block  0
call    0 returned 40
call    1 returned 38
    $$$$$:  223-block  1
call    2 never executed
       40:  224:    uint64_t curvec_size = curvec.size();
call    0 returned 40
        -:  225:    //std::cout << "curvec_size "<< curvec_size<<std::endl;
      156:  226:    for(uint64_t i = 0; i < curvec_size; i++){
      156:  226-block  0
branch  0 taken 117 (fallthrough)
branch  1 taken 39
      117:  227:        uint64_t curtime = curvec[i]->time;
      117:  227-block  0
call    0 returned 117
      233:  228:        std::vector<node> cur;
call    0 returned 117
      116:  228-block  0
call    1 returned 116
    $$$$$:  228-block  1
call    2 never executed
      117:  229:        uint64_t num = curvec[i]->num;
call    0 returned 117
    43031:  230:        for(uint64_t j = 0; j < num; j++){
    43031:  230-block  0
branch  0 taken 42915 (fallthrough)
branch  1 taken 116
    85829:  231:            node tmp;
    42915:  231-block  0
call    0 returned 42915
    42914:  231-block  1
call    1 returned 42914
    $$$$$:  231-block  2
call    2 never executed
    42915:  232:            tmp.time = curtime;
    42915:  233:            tmp.key = curvec[i]->index[j].first;
call    0 returned 42915
    42915:  234:            bool flag = true;
    42915:  235:            tmp.val = curvec[i]->nodeGet(tmp.key, flag);
call    0 returned 42915
call    1 returned 42914
branch  2 taken 42914 (fallthrough)
branch  3 taken 0 (throw)
    42914:  235-block  0
call    4 returned 42914
call    5 returned 42914
    42914:  236:            tmp.size = (tmp.val).length() + 12;
call    0 returned 42914
    42914:  237:            cur.push_back(tmp);
call    0 returned 42914
branch  1 taken 42914 (fallthrough)
branch  2 taken 0 (throw)
        -:  238:        }
      116:  239:        toMerge.push_back(cur);
      116:  239-block  0
call    0 returned 116
branch  1 taken 116 (fallthrough)
branch  2 taken 0 (throw)
        -:  240:    }
        -:  241:
      115:  242:    while(toMerge.size() > 1){
      115:  242-block  0
call    0 returned 115
branch  1 taken 76 (fallthrough)
branch  2 taken 39
       76:  243:        std::vector<std::vector<node>> tmpMerge;
       76:  243-block  0
call    0 returned 76
    $$$$$:  243-block  1
call    1 never executed
      152:  244:        while(!toMerge.empty()){
      152:  244-block  0
call    0 returned 152
branch  1 taken 76 (fallthrough)
branch  2 taken 76
      152:  245:            std::vector<node> result;
       76:  245-block  0
call    0 returned 76
call    1 returned 76
    $$$$$:  245-block  1
call    2 never executed
      152:  246:            std::vector<node> tmp1 = toMerge[toMerge.size() - 1];
call    0 returned 76
call    1 returned 76
call    2 returned 76
branch  3 taken 76 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 76
    $$$$$:  246-block  0
call    6 never executed
       76:  247:            toMerge.pop_back();
       76:  247-block  0
call    0 returned 76
      152:  248:            std::vector<node> tmp2 = toMerge[toMerge.size() - 1];
call    0 returned 76
call    1 returned 76
call    2 returned 76
branch  3 taken 76 (fallthrough)
branch  4 taken 0 (throw)
       76:  248-block  0
call    5 returned 76
    $$$$$:  248-block  1
call    6 never executed
       76:  249:            toMerge.pop_back();
       76:  249-block  0
call    0 returned 76
       76:  250:            uint64_t i = 0, j = 0;
       76:  251:            uint64_t tmp1_size = tmp1.size();
call    0 returned 76
       76:  252:            uint64_t tmp2_size = tmp2.size();
call    0 returned 76
      115:  253:            while(i < tmp1_size){
      115:  253-block  0
branch  0 taken 76 (fallthrough)
branch  1 taken 39
       39:  253-block  1
    44951:  254:                while(j < tmp2_size){
    44951:  254-block  0
branch  0 taken 44914 (fallthrough)
branch  1 taken 37
    44875:  254-block  1
    44914:  255:                    if(i == tmp1_size && j < tmp2_size){
    44914:  255-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 44875
       39:  255-block  1
branch  2 taken 39 (fallthrough)
branch  3 taken 0
       39:  256:                        result.insert(result.end(), tmp2.begin() + j, tmp2.end());
       39:  256-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
call    3 returned 39
call    4 returned 39
call    5 returned 39
branch  6 taken 39 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$:  256-block  1
    $$$$$:  256-block  2
    $$$$$:  256-block  3
       39:  257:                        break;
       39:  257-block  0
        -:  258:                    }
    44875:  259:                    if(tmp1[i].key > tmp2[j].key){
    44875:  259-block  0
call    0 returned 44875
call    1 returned 44875
branch  2 taken 26197 (fallthrough)
branch  3 taken 18678
    26197:  260:                        result.push_back(tmp2[j]);
    26197:  260-block  0
call    0 returned 26197
call    1 returned 26197
branch  2 taken 26197 (fallthrough)
branch  3 taken 0 (throw)
    26197:  261:                        j++;
    26197:  261-block  0
        -:  262:                    }
        -:  263:                    else{
    18678:  264:                        if(tmp1[i].key < tmp2[j].key){
    18678:  264-block  0
call    0 returned 18678
call    1 returned 18678
branch  2 taken 18678 (fallthrough)
branch  3 taken 0
    18678:  265:                            result.push_back(tmp1[i]);
    18678:  265-block  0
call    0 returned 18678
call    1 returned 18678
branch  2 taken 18678 (fallthrough)
branch  3 taken 0 (throw)
    18678:  266:                            i++;
    18678:  266-block  0
        -:  267:                        }
        -:  268:                        else{
    #####:  269:                            if(tmp1[i].time < tmp2[j].time){
    %%%%%:  269-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  270:                                result.push_back(tmp2[j]);
    %%%%%:  270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  271:                            }
        -:  272:                            else{
    #####:  273:                                result.push_back(tmp1[i]);
    %%%%%:  273-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  274:                            }
    #####:  275:                            i++;
    #####:  276:                            j++;
    %%%%%:  276-block  0
        -:  277:                        }
        -:  278:                    }
        -:  279:                }
       76:  280:                if(i < tmp1_size && j == tmp2_size){
       76:  280-block  0
branch  0 taken 37 (fallthrough)
branch  1 taken 39
       37:  280-block  1
branch  2 taken 37 (fallthrough)
branch  3 taken 0
       37:  281:                    result.insert(result.end(), tmp1.begin() + i, tmp1.end());
       37:  281-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
call    3 returned 37
call    4 returned 37
call    5 returned 37
branch  6 taken 37 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$:  281-block  1
    $$$$$:  281-block  2
    $$$$$:  281-block  3
       37:  282:                    break;
       37:  282-block  0
        -:  283:                }
        -:  284:            }
       76:  285:            tmpMerge.push_back(result);
       76:  285-block  0
call    0 returned 76
branch  1 taken 76 (fallthrough)
branch  2 taken 0 (throw)
        -:  286:
        -:  287:            //剩下一个
       76:  288:            if(toMerge.size() == 1){
       76:  288-block  0
call    0 returned 76
branch  1 taken 37 (fallthrough)
branch  2 taken 39
       74:  289:                std::vector<node> tmp = toMerge[0];
       37:  289-block  0
call    0 returned 37
call    1 returned 37
branch  2 taken 37 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 37
    $$$$$:  289-block  1
call    5 never executed
       37:  290:                tmpMerge.push_back(tmp);
       37:  290-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37:  291:                std::vector<node>().swap(tmp);
       37:  291-block  0
call    0 returned 37
call    1 returned 37
call    2 returned 37
       37:  292:                toMerge.pop_back();
call    0 returned 37
        -:  293:            }
        -:  294:        }
       76:  295:        toMerge = tmpMerge;
       76:  295-block  0
call    0 returned 76
branch  1 taken 76 (fallthrough)
branch  2 taken 0 (throw)
       76:  296:        std::vector<std::vector<node>>().swap(tmpMerge);
       76:  296-block  0
call    0 returned 76
call    1 returned 76
call    2 returned 76
call    3 returned 76
        -:  297:    }
       77:  298:    std::vector<node> toMerge1 = toMerge[0];
       39:  298-block  0
call    0 returned 39
call    1 returned 39
branch  2 taken 39 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 38
    $$$$$:  298-block  1
call    5 never executed
       39:  299:    toMerge.pop_back();
       39:  299-block  0
call    0 returned 39
        -:  300:
       39:  301:    uint64_t comp_size = comp.size();
call    0 returned 39
       77:  302:    std::vector<node> cur;
call    0 returned 39
call    1 returned 38
    $$$$$:  302-block  0
call    2 never executed
      39*:  303:    for(uint64_t i = 0; i < comp_size; i++){
       39:  303-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 39
        -:  304:        //删除下一层待归并的sstable
    #####:  305:        std::string path = comp[i]->path;
    %%%%%:  305-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  305-block  1
call    4 never executed
    $$$$$:  305-block  2
call    5 never executed
        -:  306:        //std::cout << "next comp path:  " << path<< std::endl;
        -:  307:        //std::cout << min << "  " << max << std::endl;
        -:  308:
    #####:  309:        uint64_t curtime = comp[i]->time;
    %%%%%:  309-block  0
call    0 never executed
    #####:  310:        for(uint64_t j = 0; j < comp[i]->num; j++){
    %%%%%:  310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  311:            node tmp;
    %%%%%:  311-block  0
call    0 never executed
    %%%%%:  311-block  1
call    1 never executed
    $$$$$:  311-block  2
call    2 never executed
    #####:  312:            tmp.time = curtime;
    #####:  313:            tmp.key = comp[i]->index[j].first;
call    0 never executed
    #####:  314:            bool flag = true;
    #####:  315:            tmp.val = comp[i]->nodeGet(tmp.key, flag);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  315-block  0
call    4 never executed
call    5 never executed
        -:  316://            if(tmp.key >= 65338 && tmp.key <= 65462){
        -:  317://                //std::cout <<tmp.key <<  "  you see key  and the length" << tmp.val.length() << std::endl;
        -:  318://            }
    #####:  319:            tmp.size = (tmp.val).length() + 12;
call    0 never executed
    #####:  320:            cur.push_back(tmp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  321:        }
    #####:  322:        const char *delFile = path.data();
    %%%%%:  322-block  0
call    0 never executed
    #####:  323:        utils::rmfile(delFile);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  324:        //std::cout << "delete  " << path << std::endl;
        -:  325:    }
        -:  326:
        -:  327:    //删除已有的sstable
      154:  328:    for(uint64_t i = 0; i < curvec_size; i++){
       39:  328-block  0
      154:  328-block  1
branch  0 taken 115 (fallthrough)
branch  1 taken 39
      230:  329:        std::string s = curvec[i]->path;
      115:  329-block  0
call    0 returned 115
call    1 returned 115
branch  2 taken 115 (fallthrough)
branch  3 taken 0 (throw)
      115:  329-block  1
call    4 returned 115
    $$$$$:  329-block  2
call    5 never executed
        -:  330:        //std::cout << "delete  " << s << std::endl;
      115:  331:        const char *delFile = s.data();
      115:  331-block  0
call    0 returned 115
      115:  332:        utils::rmfile(delFile);
call    0 returned 115
branch  1 taken 115 (fallthrough)
branch  2 taken 0 (throw)
        -:  333:    }
        -:  334:
        -:  335://    std::vector<node> mergeResult;
        -:  336://    uint64_t k = 0, i = 0;
        -:  337://    uint64_t toMerge_size = toMerge.size();
        -:  338://    uint64_t toMerge1_size = toMerge1.size();
        -:  339://    for(i = 0; i < toMerge_size; i++){
        -:  340://        std::vector<node> tmp = toMerge[i];
        -:  341://        if(k == toMerge1_size){
        -:  342://            mergeResult.insert(mergeResult.end(), tmp.begin(), tmp.end());
        -:  343://            continue;
        -:  344://        }
        -:  345://        uint64_t tmp_size = tmp.size();
        -:  346://        uint64_t j = 0;
        -:  347://        while(j < tmp_size){
        -:  348://            if(tmp[j].key < min){
        -:  349://                mergeResult.push_back(tmp[j]);
        -:  350://                j++;
        -:  351://                continue;
        -:  352://            }
        -:  353://            if(tmp[j].key > max){
        -:  354://                mergeResult.insert(mergeResult.end(), tmp.begin() + j, tmp.end());
        -:  355://                break;
        -:  356://            }
        -:  357://            if(tmp[j].key < toMerge1[k].key){
        -:  358://                std::cout << "push  " <<  tmp[j].key << "  " << tmp[j].size - 12 << std::endl;
        -:  359://                mergeResult.push_back(tmp[j]);
        -:  360://                j++;
        -:  361://            }
        -:  362://            else{
        -:  363://                mergeResult.push_back(toMerge1[k]);
        -:  364://                if(tmp[j].key == toMerge1[k].key){
        -:  365://                    j++;
        -:  366://                }
        -:  367://                k++;
        -:  368://            }
        -:  369://            if(k == toMerge1_size && j < toMerge_size){
        -:  370://                mergeResult.insert(mergeResult.end(), tmp.begin() + j, tmp.end());
        -:  371://                break;
        -:  372://            }
        -:  373://        }
        -:  374://
        -:  375://        std::vector<node>().swap(tmp);
        -:  376://    }
        -:  377://    if(k < toMerge1_size && i == toMerge_size){
        -:  378://        mergeResult.insert(mergeResult.end(), toMerge1.begin() + k, toMerge1.end());
        -:  379://    }
       77:  380:    std::vector<node> mergeResult;
       39:  380-block  0
call    0 returned 39
       38:  380-block  1
call    1 returned 38
    $$$$$:  380-block  2
call    2 never executed
       39:  381:    uint64_t k = 0, j = 0;
       39:  382:    uint64_t cur_size = cur.size();
call    0 returned 39
       39:  383:    uint64_t toMerge1_size = toMerge1.size();
call    0 returned 39
       39:  384:    std::sort(std::begin(cur), std::end(cur),
call    0 returned 39
call    1 returned 39
call    2 returned 39
branch  3 taken 39 (fallthrough)
branch  4 taken 0 (throw)
       39:  384-block  0
    $$$$$:  384-block  1
        -:  385:              [](const node &n1, const node &n2){
        -:  386:                  return n1.key < n2.key;
        -:  387:              });
        -:  388://    for(i = 0; i < cur_size; i++){
        -:  389://        if(k == toMerge1_size){
        -:  390://            mergeResult.insert(mergeResult.end(), tmp.begin(), tmp.end());
        -:  391://            continue;
        -:  392://        }
        -:  393:
      39*:  394:    while(j < cur_size){
       39:  394-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    %%%%%:  394-block  1
    #####:  395:        if(cur[j].key < min){
    %%%%%:  395-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  396:            mergeResult.push_back(cur[j]);
    %%%%%:  396-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  397:            j++;
    #####:  398:            continue;
    %%%%%:  398-block  0
        -:  399:        }
    #####:  400:        if(cur[j].key > max){
    %%%%%:  400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  401:            mergeResult.insert(mergeResult.end(), cur.begin() + j, cur.end());
    %%%%%:  401-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  401-block  1
    $$$$$:  401-block  2
    $$$$$:  401-block  3
    #####:  402:            break;
    %%%%%:  402-block  0
        -:  403:        }
    #####:  404:        if(cur[j].key < toMerge1[k].key){
    %%%%%:  404-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  405://            if(cur[j].key >= 65339 && cur[j].key <= 65461) {
        -:  406://                std::cout << "push  " << cur[j].key << "  " << cur[j].size - 12 << std::endl;
        -:  407://            }
    #####:  408:            mergeResult.push_back(cur[j]);
    %%%%%:  408-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  409:            j++;
    %%%%%:  409-block  0
        -:  410:        }
        -:  411:        else{
    #####:  412:            mergeResult.push_back(toMerge1[k]);
    %%%%%:  412-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  413:            if(toMerge1[k].key >= 65339 && toMerge1[k].key <= 65461) {
    %%%%%:  413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  413-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  413-block  2
    %%%%%:  413-block  3
    %%%%%:  413-block  4
        -:  414:                //std::cout << "toMerge1[k] " << toMerge1[k].key << "  " << toMerge1[k].size - 12 << std::endl;
        -:  415:            }
    #####:  416:            if(cur[j].key == toMerge1[k].key){
    %%%%%:  416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  417:                j++;
    %%%%%:  417-block  0
        -:  418:            }
    #####:  419:            k++;
    %%%%%:  419-block  0
        -:  420:        }
    #####:  421:        if(k == toMerge1_size && j < cur_size){
    %%%%%:  421-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  421-block  1
branch  2 never executed
branch  3 never executed
    #####:  422:            mergeResult.insert(mergeResult.end(), cur.begin() + j, cur.end());
    %%%%%:  422-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  422-block  1
    $$$$$:  422-block  2
    $$$$$:  422-block  3
    #####:  423:            break;
    %%%%%:  423-block  0
        -:  424:        }
        -:  425:    }
        -:  426:
        -:  427://        std::vector<node>().swap(tmp);
        -:  428://    }
       39:  429:    if(k < toMerge1_size && j == cur_size){
       39:  429-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 0
       39:  429-block  1
branch  2 taken 39 (fallthrough)
branch  3 taken 0
       39:  430:        mergeResult.insert(mergeResult.end(), toMerge1.begin() + k, toMerge1.end());
       39:  430-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
call    3 returned 39
call    4 returned 39
call    5 returned 39
branch  6 taken 39 (fallthrough)
branch  7 taken 0 (throw)
       39:  430-block  1
    $$$$$:  430-block  2
    $$$$$:  430-block  3
    $$$$$:  430-block  4
        -:  431:    }
        -:  432:
       39:  433:    uint64_t mergeResult_size = mergeResult.size();
       39:  433-block  0
call    0 returned 39
        -:  434:    //可以优化，这样查找~deleted~太耗时间了
       39:  435:    if(isDeepest == true) {
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####:  436:        for (uint64_t i = 0; i < mergeResult_size; i++) {
    %%%%%:  436-block  0
    %%%%%:  436-block  1
branch  0 never executed
branch  1 never executed
    %%%%%:  436-block  2
    #####:  437:            if (mergeResult[i].val == "~DELETED~") {
    %%%%%:  437-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  438:                //std::cout << "~DELETED~" << std::endl;
    #####:  439:                mergeResult.erase(mergeResult.begin() + i);
    %%%%%:  439-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  439-block  1
    $$$$$:  439-block  2
    $$$$$:  439-block  3
    #####:  440:                i--;
    #####:  441:                mergeResult_size--;
    %%%%%:  441-block  0
        -:  442:            }
        -:  443:        }
        -:  444:    }
        -:  445:
       39:  446:    std::sort(std::begin(mergeResult), std::end(mergeResult),
       39:  446-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
branch  3 taken 39 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  446-block  1
        -:  447:              [](const node &n1, const node &n2){
        -:  448:                  return n1.key < n2.key;
        -:  449:              });
        -:  450:
       39:  451:    mergeResult_size = mergeResult.size();
       39:  451-block  0
call    0 returned 39
       39:  452:    int totalsize = 0;
       39:  453:    int prev = 0;
       39:  454:    currentLevel++;
        -:  455:
       39:  456:    int count = 0;
       39:  457:    uint64_t i = 0;
    42700:  458:    for(i = 0; i < mergeResult_size; i++){
    42700:  458-block  0
branch  0 taken 42700 (fallthrough)
branch  1 taken 0
    42661:  458-block  1
    42700:  459:        int size = mergeResult[i].size;
    42700:  459-block  0
call    0 returned 42700
        -:  460://        if(mergeResult[i].key >= 65338) {
        -:  461://            std::cout << "at  " << i << " is " << mergeResult[i].key << " size  " << size << "    " << mergeResult[i].val.length() << std::endl;
        -:  462://            //std::cout << "total  " << totalsize << std::endl;
        -:  463://        }
    42700:  464:        if(totalsize + size > 2086880){
branch  0 taken 76 (fallthrough)
branch  1 taken 42624
       76:  465:            i--;
      152:  466:            std::vector<node> vec;
       76:  466-block  0
call    0 returned 76
call    1 returned 76
    $$$$$:  466-block  1
call    2 never executed
      152:  467:            std::vector<memTable::dataNode> v;
call    0 returned 76
       76:  467-block  0
call    1 returned 76
    $$$$$:  467-block  1
call    2 never executed
       76:  468:            vec.insert(vec.end(), mergeResult.begin() + prev, mergeResult.begin() + i);
call    0 returned 76
call    1 returned 76
call    2 returned 76
call    3 returned 76
call    4 returned 76
call    5 returned 76
call    6 returned 76
branch  7 taken 76 (fallthrough)
branch  8 taken 0 (throw)
    $$$$$:  468-block  0
    $$$$$:  468-block  1
    $$$$$:  468-block  2
    $$$$$:  468-block  3
       76:  469:            prev = i;
        -:  470:
       76:  471:            uint64_t vec_size = vec.size();
       76:  471-block  0
call    0 returned 76
    30289:  472:            for(uint64_t j = 0; j < vec_size; j++){
    30289:  472-block  0
branch  0 taken 30213 (fallthrough)
branch  1 taken 76
    60426:  473:                memTable::dataNode tmp;
    30213:  473-block  0
call    0 returned 30213
    30213:  473-block  1
call    1 returned 30213
    $$$$$:  473-block  2
call    2 never executed
    30213:  474:                tmp.key = vec[j].key;
call    0 returned 30213
    30213:  475:                tmp.val = vec[j].val;
call    0 returned 30213
call    1 returned 30213
branch  2 taken 30213 (fallthrough)
branch  3 taken 0 (throw)
    30213:  476:                v.push_back(tmp);
    30213:  476-block  0
call    0 returned 30213
branch  1 taken 30213 (fallthrough)
branch  2 taken 0 (throw)
        -:  477:            }
       76:  478:            count++;
       76:  479:            makeSST(v);
       76:  479-block  0
call    0 returned 76
branch  1 taken 76 (fallthrough)
branch  2 taken 0 (throw)
       76:  480:            std::vector<memTable::dataNode>().swap(v);
       76:  480-block  0
call    0 returned 76
call    1 returned 76
call    2 returned 76
       76:  481:            std::vector<node>().swap(vec);
call    0 returned 76
call    1 returned 76
call    2 returned 76
        -:  482:
       76:  483:            totalsize = 0;
       76:  484:            continue;
        -:  485:        }
        -:  486:        else{
    42624:  487:            totalsize += size;
        -:  488:        }
    42624:  489:        if(i == mergeResult_size - 1){
    42624:  489-block  0
branch  0 taken 39 (fallthrough)
branch  1 taken 42585
       78:  490:            std::vector<node> vec;
       39:  490-block  0
call    0 returned 39
call    1 returned 39
    $$$$$:  490-block  1
call    2 never executed
       78:  491:            std::vector<memTable::dataNode> v;
call    0 returned 39
       39:  491-block  0
call    1 returned 39
    $$$$$:  491-block  1
call    2 never executed
       39:  492:            vec.insert(vec.end(), mergeResult.begin() + prev, mergeResult.end());
call    0 returned 39
call    1 returned 39
call    2 returned 39
call    3 returned 39
call    4 returned 39
call    5 returned 39
branch  6 taken 39 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$:  492-block  0
    $$$$$:  492-block  1
    $$$$$:  492-block  2
        -:  493:
       39:  494:            uint64_t vec_size = vec.size();
       39:  494-block  0
call    0 returned 39
    12450:  495:            for(uint64_t j = 0; j < vec_size; j++){
    12450:  495-block  0
branch  0 taken 12411 (fallthrough)
branch  1 taken 39
    24822:  496:                memTable::dataNode tmp;
    12411:  496-block  0
call    0 returned 12411
    12411:  496-block  1
call    1 returned 12411
    $$$$$:  496-block  2
call    2 never executed
    12411:  497:                tmp.key = vec[j].key;
call    0 returned 12411
    12411:  498:                tmp.val = vec[j].val;
call    0 returned 12411
call    1 returned 12411
branch  2 taken 12411 (fallthrough)
branch  3 taken 0 (throw)
    12411:  499:                v.push_back(tmp);
    12411:  499-block  0
call    0 returned 12411
branch  1 taken 12411 (fallthrough)
branch  2 taken 0 (throw)
        -:  500:            }
       39:  501:            count++;
        -:  502:
       39:  503:            std::vector<node>().swap(vec);
       39:  503-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  504:
       39:  505:            makeSST(v);
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0 (throw)
       39:  506:            std::vector<memTable::dataNode>().swap(v);
       39:  506-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
       39:  507:            break;
        -:  508:        }
        -:  509:    }
        -:  510:    //std::cout << "count  " << count <<std::endl;
        -:  511:
       39:  512:    std::vector<node>().swap(mergeResult);
       39:  512-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  513:
       39:  514:    std::vector<Cache::Node*>().swap(curvec);
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  515:
       39:  516:    std::vector<Cache::Node*>().swap(nextvec);
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  517:
       39:  518:    comp_size = comp.size();
call    0 returned 39
      39*:  519:    for(uint64_t i = 0; i < comp_size; i++){
       39:  519-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####:  520:        comp[i]->next = nullptr;
    %%%%%:  520-block  0
call    0 never executed
    #####:  521:        delete comp[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  521-block  0
call    3 never executed
call    4 never executed
    #####:  522:        comp[i] = nullptr;
    %%%%%:  522-block  0
call    0 never executed
        -:  523:    }
       39:  524:    std::vector<Cache::Node*>().swap(comp);
       39:  524-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  525:
       39:  526:    std::vector<Cache::Node*>().swap(remain);
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  527:
       39:  528:    std::vector<Cache::Node*>().swap(curtmp);
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  529:
       39:  530:    std::vector<node>().swap(toMerge1);
call    0 returned 39
call    1 returned 39
call    2 returned 39
        -:  531:
       39:  532:    uint64_t toMerge_size = toMerge.size();
call    0 returned 39
      39*:  533:    for(uint64_t i = 0; i < toMerge_size; i++){
       39:  533-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 39
    #####:  534:        std::vector<node>().swap(toMerge[i]);
    %%%%%:  534-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  535:    }
       39:  536:    std::vector<std::vector<node>>().swap(toMerge);
       39:  536-block  0
call    0 returned 39
call    1 returned 39
call    2 returned 39
       39:  537:    isCompaction = false;
       39:  538:    compactionTime = 0;
       39:  539:    checkCompaction();
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  540:}
        -:  541:
        -:  542:/**
        -:  543: * Returns the (string) value of the given key.
        -:  544: * An empty string indicates not found.
        -:  545: */
function _ZN7KVStore3getB5cxx11Ey called 13213 returned 100% blocks executed 37%
    13213:  546:std::string KVStore::get(uint64_t key)
        -:  547:{
    26426:  548:    std::string result = "";
    13213:  548-block  0
call    0 returned 13213
call    1 returned 13213
branch  2 taken 13213 (fallthrough)
branch  3 taken 0 (throw)
    13213:  548-block  1
call    4 returned 13213
    $$$$$:  548-block  2
    $$$$$:  548-block  3
call    5 never executed
    13213:  549:    bool isDelete = false;
    13213:  550:    result = mt.get(key, isDelete);
call    0 returned 13213
branch  1 taken 13213 (fallthrough)
branch  2 taken 0 (throw)
    13213:  550-block  0
call    3 returned 13213
call    4 returned 13213
    13213:  551:    if(isDelete == true){
branch  0 taken 0 (fallthrough)
branch  1 taken 13213
    #####:  552:        return "";
    %%%%%:  552-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  552-block  1
call    4 never executed
    $$$$$:  552-block  2
call    5 never executed
    $$$$$:  552-block  3
        -:  553:    }
        -:  554:    else{
    13213:  555:        if(result == ""){           //如果memtable中未找到，则到sstable中进行寻找
    13213:  555-block  0
call    0 returned 13213
branch  1 taken 0 (fallthrough)
branch  2 taken 13213
        -:  556:            //std::cout << "search in sstable" << std::endl;
    #####:  557:            result = cache.get(key);
    %%%%%:  557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  557-block  1
call    3 never executed
call    4 never executed
        -:  558:            //std::cout << key << " is " <<result.length() << std::endl;
    #####:  559:            if(result == "~DELETED~"){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  560:                return "";
    %%%%%:  560-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  560-block  1
call    4 never executed
    $$$$$:  560-block  2
call    5 never executed
    $$$$$:  560-block  3
        -:  561:            }
        -:  562:        }
        -:  563:    }
        -:  564:
    13213:  565:    return result;
    13213:  565-block  0
call    0 returned 13213
        -:  566:}
        -:  567:/**
        -:  568: * Delete the given key-value pair if it exists.
        -:  569: * Returns false iff the key is not found.
        -:  570: */
function _ZN7KVStore3delEy called 0 returned 0% blocks executed 0%
    #####:  571:bool KVStore::del(uint64_t key)
        -:  572:{
    #####:  573:    bool isDeleted = false;
    #####:  574:    bool flag = mt.del(key, isDeleted);
    %%%%%:  574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  575:    if(isDeleted == true){
    %%%%%:  575-block  0
branch  0 never executed
branch  1 never executed
    #####:  576:        return false;
    %%%%%:  576-block  0
        -:  577:    }
    #####:  578:    if(flag == false){
    %%%%%:  578-block  0
branch  0 never executed
branch  1 never executed
    #####:  579:        std::string d = "~DELETED~";
    %%%%%:  579-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  579-block  1
call    4 never executed
    $$$$$:  579-block  2
    $$$$$:  579-block  3
call    5 never executed
    #####:  580:        flag = cache.del(key);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  581:        put(key, d);
    %%%%%:  581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  582:    }
        -:  583://    if(key >= 64562)
        -:  584://        std::cout << "flag " << flag <<std::endl;
        -:  585:
    #####:  586:    return flag;
    %%%%%:  586-block  0
        -:  587:}
        -:  588:
        -:  589:/**
        -:  590: * This resets the kvstore. All key-value pairs should be removed,
        -:  591: * including memtable and all sstables files.
        -:  592: */
function _ZN7KVStore5resetEv called 1 returned 100% blocks executed 24%
        1:  593:void KVStore::reset()
        -:  594:{
        1:  595:    mt.reset();
        1:  595-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  596:    cache.reset();
        1:  596-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  597:    currentLevel = 0;
        1:  598:    currentNum = 0;
        1:  599:    compactionTime = 0;
        1:  600:    maxLevel = 0;
        2:  601:    std::string path = "data/level-";
        1:  601-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:  601-block  1
    $$$$$:  601-block  2
call    5 never executed
        -:  602:
        1:  603:    int i = 0;
        3:  604:    std::string tmpDir = path + std::to_string(i);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  604-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  604-block  1
call    6 returned 1
    $$$$$:  604-block  2
    $$$$$:  604-block  3
call    7 never executed
       1*:  605:    while(utils::dirExists(tmpDir)){
        1:  605-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  605-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  605-block  2
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    $$$$$:  605-block  3
call    9 never executed
    $$$$$:  605-block  4
    #####:  606:        std::vector<std::string> ret;
    %%%%%:  606-block  0
call    0 never executed
    $$$$$:  606-block  1
call    1 never executed
    #####:  607:        utils::scanDir(tmpDir, ret);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  607-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  607-block  1
call    6 never executed
    $$$$$:  607-block  2
call    7 never executed
    $$$$$:  607-block  3
    #####:  608:        i++;
    #####:  609:        uint64_t ret_size = ret.size();
call    0 never executed
    #####:  610:        for(uint64_t j = 0; j < ret_size; j++){
    %%%%%:  610-block  0
branch  0 never executed
branch  1 never executed
    #####:  611:            std::string tmpPath = tmpDir + ("/" + ret[j]);
    %%%%%:  611-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  611-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  611-block  2
call    7 never executed
    $$$$$:  611-block  3
    $$$$$:  611-block  4
call    8 never executed
    #####:  612:            const char *delPath = tmpPath.data();
call    0 never executed
    #####:  613:            utils::rmfile(delPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  614:        }
    #####:  615:        std::vector<std::string>().swap(ret);
    %%%%%:  615-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  616:        const char *delDir = tmpDir.data();
call    0 never executed
    #####:  617:        utils::rmdir(delDir);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  618:        tmpDir = path + std::to_string(i);
    %%%%%:  618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  618-block  2
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  618-block  3
call   10 never executed
    $$$$$:  618-block  4
        -:  619:    }
        1:  620:}
